from django.shortcuts import render


from django.http import HttpResponse, HttpResponseRedirect

from ..models import *
from datetime import datetime

# Create your views here.
def index(request):
    user = request.user
    userobj = Patient.objects.get(userNameField=user.username)
    testString = 'auth.patient' in user.get_all_permissions()
    today = datetime.now()
    context = 
    #Create a way for doctors to NOT rely on last names
    #Rather on usernames
    
    if not testString:
        return HttpResponseRedirect("/notauthorized")
    if request.method == "POST":
        month = request.POST.get('month', '')
        day = request.POST.get('day', '')
        year = request.POST.get('year', '')
        doctor = request.POST.get('doctor', '')
        time = request.POST.get('time', '')
        if month == '' or day == '' or year == '' or doctor == '' or time == '':
            return render(request, 'patients/patientCreateAppointment.html',
                          {"messagenum": get_number_of_unread(user),"name": userobj.firstName + " " + userobj.lastName,
                           "errortext" : "Missing Required Field", "doctors" : Doctor.objects.order_by("firstName"),"day":today.day})

        patient=Patient.objects.get(userNameField=user.username)

        #Get a doctor that matches 
        doc=Doctor.objects.get(id=doctor)

        try:
            date = datetime.strptime(month + ' ' + day +  ' ' + year + ' ' + time + "00", '%m %d %Y %H:%M%S')
        except ValueError:
            error = "Invalid Day"
            return render(request, 'patients/patientCreateAppointment.html',
                          {"messagenum": get_number_of_unread(user),"name": userobj.firstName + " " + userobj.lastName,
                           "errortext" : "Invalid Day", "doctors" : Doctor.objects.order_by("firstName"),"day":today.day})
                                  
        #Grab all existing appointments at time for both the patient & doctor
        patient_existingAppt = Appointment.objects.filter(patient=patient,dateTime=date,hospital=patient.hospital)
        doctor_existingAppt = Appointment.objects.filter(doctor=doc, dateTime=date,hospital=patient.hospital)

        #If the appointment is in the past, don't create it either
        if today > date:
            error = "Must be scheduled for future"
            return render(request, 'patients/patientCreateAppointment.html',
                          {"messagenum": get_number_of_unread(user),"name": userobj.firstName + " " + userobj.lastName,
                          "errortext" : error, "doctors" : Doctor.objects.order_by("firstName"),"day":today.day})                    

        #If there is an existing appointment, do not create the appointment.
        elif patient_existingAppt.exists() or doctor_existingAppt.exists():
            error = "Appointment Conflict"
            return render(request, 'patients/patientCreateAppointment.html',
                          {"messagenum": get_number_of_unread(user),"name": userobj.firstName + " " + userobj.lastName,
                          "errortext" : error, "doctors" : Doctor.objects.order_by("firstName"),"day":today.day})
        
        #If there's no conflict, and it's not in the past, that time is free
        else:
                appointment = Appointment(doctor=doc, patient=patient,dateTime=date,hospital=patient.hospital)

        appointment.save()
        log_add("Patient " + str(patient) + " created an appointment.")

        return HttpResponseRedirect("/calendar")

    else :
        return render(request, 'patients/patientCreateAppointment.html', {"messagenum": get_number_of_unread(user),"name": userobj.firstName + " " + userobj.lastName,  "doctors" : Doctor.objects.order_by("firstName"), "day":today.day, "date":today})
