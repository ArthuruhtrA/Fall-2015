from django.shortcuts import render


from django.http import HttpResponse, HttpResponseRedirect

from ..models import *
from datetime import datetime
from django.db.models import Q

def index(request, text):
    user = request.user
    testString = 'auth.nurse' in user.get_all_permissions()

    userobj = Nurse.objects.get(userNameField=user.username)

    appointment = Appointment.objects.get(id=text)

    patient = appointment.patient
    doctor = appointment.doctor
    today = datetime.now()
    #Generates all possible hours an appointment can be scheduled
    times = []
    for t in range(0,24):
        times += [str(t)+":00"]

    context = {"messagenum": get_number_of_unread(user), 'patient': patient, 'doctor': doctor, 'appointment':appointment, 'times':times}
    
    #Authenticates the user
    if not testString:
        return HttpResponseRedirect("/notauthorized")

    if request.method == "POST":
        #Grab all submitted values
        month = request.POST.get('month', '')
        day = request.POST.get('day', '')
        year = request.POST.get('year', '')
        time = request.POST.get('time', '')

        #Make sure there were no empty fields
        if month == '' or day == '' or year == '' or patient == '' or time == '':
            context['errortext']="Missing Required Field"
            return render(request, 'patients/nurseUpdateAppointment.html',context)

        #Attempt to construct the date for the appointment
        try:
            date = datetime.strptime(month + ' ' + day +  ' ' + year + ' ' + time + "00", '%m %d %Y %H:%M%S')

        #This exception occurs when the user enters non-numerical (or out of range) days for the appointment
        except ValueError:
            context['errortext']="Invalid Day"
            return render(request, 'patients/nurseUpdateAppointment.html',context)

        #Grab all existing appointments at time for both the patient & doctor
        #It also excludes the appointment which matches it's ID (AKA, itself)
        patient_existingAppt = Appointment.objects.filter(~Q(id=appointment.id),patient=patient,dateTime=date,hospital=patient.hospital)
        doctor_existingAppt = Appointment.objects.filter(~Q(id=appointment.id),doctor=doctor, dateTime=date)

        #If the appointment has already happened, don't create it
        if today > appointment.dateTime:
            context["errortext"] = "This appointment has passed"
            return render(request, 'patients/nurseUpdateAppointment.html',context)

        #If the appointment is scheduled at a time in the past, don't create it either
        elif today > date:
            context["errortext"] = "Must be scheduled for future"
            return render(request, 'patients/nurseUpdateAppointment.html',context)

        #If there is an existing appointment for either party, do not create the appointment.
        elif patient_existingAppt.exists() or doctor_existingAppt.exists():
            context["errortext"] = "Appointment Conflict"
            return render(request, 'patients/nurseUpdateAppointment.html',context)
        
        #If there's no conflict, and it's not in the past, that time is free
        else:
            appointment.dateTime = date
            appointment.save()
            #Add a log
            log_add("Nurse " + user.first_name + " " + user.last_name + " edited an appointment.")
        

        return HttpResponseRedirect("/nursecalendar")

    else :
        return render(request, 'patients/nurseUpdateAppointment.html', context)
