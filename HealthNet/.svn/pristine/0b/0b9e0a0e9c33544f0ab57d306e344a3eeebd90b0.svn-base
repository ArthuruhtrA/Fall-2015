from django.shortcuts import render

from django.http import HttpResponse, HttpResponseRedirect

from ..models import *
from datetime import datetime, timedelta
from django.utils import timezone

# Create your views here.
def index(request):
    user = request.user
    userobj = Doctor.objects.get(userNameField=user.username)
    testString = 'auth.doctor' in user.get_all_permissions()
    today = timezone.now()
    

    times = []
    for t in range(0,24):
        times += [str(t)+":00"]

    #This context variable holds everything we are sending to the HTML.  Please add your desired context here
    context = {"name": userobj.firstName + " " + userobj.lastName, "messagenum": get_number_of_unread(user),"patients" : Patient.objects.order_by("firstName"),"date":today,"times":times}

    if not testString:
        return HttpResponseRedirect("/notauthorized")
    if request.method == "POST":
        month = request.POST.get('month', '')
        day = request.POST.get('day', '')
        year = request.POST.get('year', '')
        patientId = request.POST.get('patient', '')
        time = request.POST.get('time', '')
        if month == '' or day == '' or year == '' or patientId == '' or time == '':
            context['errortext']="Missing Required Field",
            return render(request, 'patients/doctorCreateAppointment.html',context)


        doctor=Doctor.objects.get(userNameField=user.username)
        patient=Patient.objects.get(id = patientId)



        try:
            date = datetime.strptime(month + ' ' + day + ' ' + year + ' ' + time + "00", '%m %d %Y %H:%M%S')   
            #So for this timezone business to work, tzinfo will need to be concretely defined somewhere.
            #Check out this link: https://docs.python.org/2/library/datetime.html#datetime.tzinfo
            date = timezone.make_aware(date, timezone=timezone.get_current_timezone())       
        except ValueError:
            context['errortext']="Invalid Day"
            return render(request, 'patients/doctorCreateAppointment.html',context)

        #Grab all appointments belonging to patient or doctor at that time
        patient_existingAppt = Appointment.objects.filter(patient=patient,dateTime=date,hospital=patient.hospital)
        doctor_existingAppt = Appointment.objects.filter(doctor=doctor, dateTime=date)

        if today > date:
            context['errortext']="Must be scheduled for future"
            return render(request, 'patients/doctorCreateAppointment.html',context)

        elif patient_existingAppt.exists() or doctor_existingAppt.exists():
            context['errortext']= "Appointment Conflict"
            return render(request, 'patients/doctorCreateAppointment.html',context)
        else:
            appointment = Appointment(doctor=doctor, patient=patient,dateTime=date,hospital=patient.hospital)
            #timeAdjustment = appointment.dateTime
            #timeAdjustment -= timedelta(hours=4)
            #appointment.dateTime = timeAdjustment
            appointment.save()
            log_add("Doctor " + str(doctor) + " created an appointment.")
            return HttpResponseRedirect("/calendar")

    else :
        return render(request, 'patients/doctorCreateAppointment.html', context)
